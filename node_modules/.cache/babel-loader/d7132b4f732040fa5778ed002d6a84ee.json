{"ast":null,"code":"var _jsxFileName = \"/Users/kamil/Desktop/Programowanie/ygo/src/components/todo_list/ToDoList.js\";\nimport React, { useState, useEffect, useRef, useLayoutEffect } from 'react';\nimport './ToDoList.css';\nimport { db } from '../../firebase.js';\nimport firebase from \"firebase\";\nexport default function ToDoList({\n  user\n}) {\n  const [newTaskValue, setTask] = useState(\"\");\n  const [tasks, setTasks] = useState([]);\n  const [doneTasks, setTaskDone] = useState();\n\n  const DayAsString = dayIndex => {\n    var weekdays = new Array(7);\n    weekdays[0] = \"Sunday\";\n    weekdays[1] = \"Monday\";\n    weekdays[2] = \"Tuesday\";\n    weekdays[3] = \"Wednesday\";\n    weekdays[4] = \"Thursday\";\n    weekdays[5] = \"Friday\";\n    weekdays[6] = \"Saturday\";\n    return weekdays[dayIndex];\n  };\n\n  var currentDate = new Date();\n  currentDate.setDate(today.getDate());\n  const today = new Date();\n  const todayDate = String(DayAsString(currentDate.getDay()) + \"_\" + currentDate.getDate() + \"_\" + currentDate.getMonth());\n\n  const addTask = e => {\n    e.preventDefault();\n    db.collection(user.displayName).doc(\"ToDoList\").collection(todayDate).add({\n      text: newTaskValue,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n      isDone: false\n    });\n    setTask('');\n  };\n\n  useEffect(() => {\n    //function to download task from today.\n    if (user != undefined) {\n      db.collection(user.displayName).doc(\"ToDoList\").collection(todayDate) //todayDate\n      .orderBy(\"timestamp\", \"desc\").onSnapshot(snapshot => {\n        setTasks(snapshot.docs.map(doc => ({\n          id: doc.id,\n          task: doc.data()\n        })));\n      });\n    }\n  }, [user]);\n\n  const setAsDone = e => {\n    db.collection(user.displayName).doc(\"ToDoList\").collection(todayDate).doc(e.target.id).update({\n      isDone: true\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"toDoList__wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"toDoList__list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, tasks.map(task => /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 21\n    }\n  }, \" \", task.task.isDone ? /*#__PURE__*/React.createElement(\"li\", {\n    className: \"toDoList__item\",\n    value: task.task.text,\n    id: task.id,\n    onClick: setAsDone,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 25\n    }\n  }, task.task.text) : /*#__PURE__*/React.createElement(\"li\", {\n    value: task.task.text,\n    id: task.id,\n    onClick: setAsDone,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 25\n    }\n  }, task.task.text)))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"toDoList__addTask\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: newTaskValue,\n    onChange: e => setTask(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: addTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }, \"Add Task\"))));\n}","map":{"version":3,"sources":["/Users/kamil/Desktop/Programowanie/ygo/src/components/todo_list/ToDoList.js"],"names":["React","useState","useEffect","useRef","useLayoutEffect","db","firebase","ToDoList","user","newTaskValue","setTask","tasks","setTasks","doneTasks","setTaskDone","DayAsString","dayIndex","weekdays","Array","currentDate","Date","setDate","today","getDate","todayDate","String","getDay","getMonth","addTask","e","preventDefault","collection","displayName","doc","add","text","timestamp","firestore","FieldValue","serverTimestamp","isDone","undefined","orderBy","onSnapshot","snapshot","docs","map","id","task","data","setAsDone","target","update","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, useLayoutEffect} from 'react'\nimport './ToDoList.css'\nimport { db } from '../../firebase.js'\nimport firebase from \"firebase\"\n\n\nexport default function ToDoList({user}) {\n     const [newTaskValue, setTask] = useState(\"\");\n     const [tasks, setTasks] = useState([]);\n     const [doneTasks, setTaskDone] = useState()\n    \n    \n     const DayAsString = (dayIndex) => {\n        var weekdays = new Array(7);\n        weekdays[0] = \"Sunday\";\n        weekdays[1] = \"Monday\";\n        weekdays[2] = \"Tuesday\";\n        weekdays[3] = \"Wednesday\";\n        weekdays[4] = \"Thursday\";\n        weekdays[5] = \"Friday\";\n        weekdays[6] = \"Saturday\";\n    \n        return weekdays[dayIndex];\n    }\n    \n    \n    var currentDate = new Date();\n    currentDate.setDate(today.getDate());\n    const today = new Date()\n    const todayDate = String(DayAsString(currentDate.getDay()) + \"_\" + currentDate.getDate() + \"_\" +currentDate.getMonth());\n\n\n\n    const addTask = (e) => {  \n         e.preventDefault();\n         db.collection(user.displayName).doc(\"ToDoList\").collection(todayDate).add({\n             text: newTaskValue,\n             timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n             isDone: false\n         })\n         setTask('');\n     }\n\n\n     useEffect(() => {  //function to download task from today.\n        if(user!=undefined){   \n            db \n                .collection(user.displayName)\n                .doc(\"ToDoList\")\n                .collection(todayDate) //todayDate\n                .orderBy(\"timestamp\", \"desc\")\n                .onSnapshot((snapshot) =>{\n                    setTasks(snapshot.docs.map(doc => ({\n                        id: doc.id,\n                        task: doc.data()\n                        })));\n                        }) \n            } \n       \n    }, [user])\n\n\n  \n\n\n          \n        \n\n    const setAsDone = (e) => {\n        db.collection(user.displayName).doc(\"ToDoList\").collection(todayDate).doc(e.target.id)\n        .update({isDone: true})\n    }\n    \n\n    \n    return (\n    <div className=\"toDoList__wrapper\">\n    <div className=\"toDoList__list\">\n            <ul>\n            {tasks.map((task) => (\n                    <p> { task.task.isDone ?\n                        <li className=\"toDoList__item\" value={task.task.text} id={task.id} onClick={setAsDone}>{task.task.text}</li>:\n                        <li value={task.task.text} id={task.id} onClick={setAsDone}>{task.task.text}</li> \n                        }\n                    </p>\n                )\n                \n                )}\n            </ul>\n        \n        <div className=\"toDoList__addTask\">\n            <input type=\"text\" value={newTaskValue} onChange={e => setTask(e.target.value)}></input>\n            <button onClick={addTask}>Add Task</button>\n    </div>\n    </div>\n    </div>\n    )\n\n\n} \n"]},"metadata":{},"sourceType":"module"}