{"ast":null,"code":"var _jsxFileName = \"/Users/kamil/Desktop/Programowanie/ygo/src/components/todo_list/ToDoList.js\";\nimport React, { useState, useEffect, useRef, useLayoutEffect } from 'react';\nimport './ToDoList.css';\nimport { db } from '../../firebase.js';\nimport firebase from \"firebase\";\nexport default function ToDoList({\n  user\n}) {\n  const [newTaskValue, setTask] = useState(\"\");\n  const [tasks, setTasks] = useState([]);\n  const [doneTasks, setTaskDone] = useState();\n  const today = new Date();\n  const todayDate = String(today.getDate()).padStart(2, '0') + \"_\" + String(today.getMonth() + 1).padStart(2, '0');\n\n  const addTask = e => {\n    //function to add task \n    e.preventDefault();\n    db.collection(user.displayName).doc(\"ToDoList\").collection(todayDate).add({\n      text: newTaskValue,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n      isDone: false\n    });\n    setTask('');\n  };\n\n  useEffect(() => {\n    //function to download task from today.\n    if (user != undefined) {\n      try {\n        db.collection(user.displayName).doc(\"ToDoList\").collection(todayDate) //todayDate\n        .orderBy(\"timestamp\", \"desc\").onSnapshot(snapshot => {\n          setTasks(snapshot.docs.map(doc => ({\n            id: doc.id,\n            task: doc.data()\n          })));\n        });\n      } catch {\n        console.log(\"o nie \");\n      }\n    }\n  }, []);\n\n  const useIsMount = () => {\n    //function to return, than first render or no\n    const isMountRef = useRef(true);\n    useEffect(() => {\n      isMountRef.current = false;\n    }, []);\n    return isMountRef.current;\n  };\n\n  const isMount = useIsMount();\n  useEffect(() => {\n    if (!isMount && tasks.length >= 1) {\n      let howManyTaskIsDone = 0;\n\n      for (let i = 0; i <= tasks.length - 1; i++) {\n        if (tasks[i].task.isDone == true) {\n          howManyTaskIsDone += 1;\n          setTaskDone(howManyTaskIsDone);\n        }\n      }\n    }\n  }, [tasks]);\n\n  const setAsDone = e => {\n    db.collection(user.displayName).doc(\"ToDoList\").collection(todayDate).doc(e.target.id).update({\n      isDone: true\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"toDoList__wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }, user.displayName ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"toDoList__list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }\n  }, tasks.map(task => /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 21\n    }\n  }, task.task.isDone ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"boxes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    id: task.id,\n    onClick: setAsDone,\n    checked: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    id: task.id,\n    htmlFor: task.id,\n    onClick: setAsDone,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 25\n    }\n  }, task.task.text)) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"boxes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    id: task.id,\n    onClick: setAsDone,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    id: task.id,\n    htmlFor: task.id,\n    onClick: setAsDone,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 25\n    }\n  }, task.task.text)))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"toDoList__addTask\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"toDoList__input\",\n    type: \"text\",\n    value: newTaskValue,\n    onChange: e => setTask(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"toDoList__button\",\n    onClick: addTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 68\n    }\n  }, \"ADD TASK\")))) : /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 2\n    }\n  }, \"Please refresh the page\"));\n}","map":{"version":3,"sources":["/Users/kamil/Desktop/Programowanie/ygo/src/components/todo_list/ToDoList.js"],"names":["React","useState","useEffect","useRef","useLayoutEffect","db","firebase","ToDoList","user","newTaskValue","setTask","tasks","setTasks","doneTasks","setTaskDone","today","Date","todayDate","String","getDate","padStart","getMonth","addTask","e","preventDefault","collection","displayName","doc","add","text","timestamp","firestore","FieldValue","serverTimestamp","isDone","undefined","orderBy","onSnapshot","snapshot","docs","map","id","task","data","console","log","useIsMount","isMountRef","current","isMount","length","howManyTaskIsDone","i","setAsDone","target","update","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, useLayoutEffect} from 'react'\nimport './ToDoList.css'\nimport { db } from '../../firebase.js'\nimport firebase from \"firebase\"\n\nexport default function ToDoList({user}) {\n     const [newTaskValue, setTask] = useState(\"\");\n     const [tasks, setTasks] = useState([]);\n     const [doneTasks, setTaskDone] = useState()\n    \n    const today = new Date()\n    const todayDate = String(today.getDate()).padStart(2, '0') + \"_\" + String(today.getMonth() + 1).padStart(2, '0');\n\n\n\n    const addTask = (e) => {  //function to add task \n         e.preventDefault();\n         db.collection(user.displayName).doc(\"ToDoList\").collection(todayDate).add({\n             text: newTaskValue,\n             timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n             isDone: false\n         })\n         setTask('');\n     }\n\n\n\n     \n\n    \n     useEffect(() => {  //function to download task from today.\n        if(user!=undefined){\n            try{   \n            db \n                .collection(user.displayName)\n                .doc(\"ToDoList\")\n                .collection(todayDate) //todayDate\n                .orderBy(\"timestamp\", \"desc\")\n                .onSnapshot((snapshot) =>{\n                    setTasks(snapshot.docs.map(doc => ({\n                        id: doc.id,\n                        task: doc.data()\n                        })));\n                        }) \n            }catch{console.log(\"o nie \")}} \n       \n    }, [])\n\n\n    const useIsMount = () => { //function to return, than first render or no\n        const isMountRef = useRef(true);\n        useEffect(() => {\n          isMountRef.current = false;\n        }, []);\n        return isMountRef.current;\n      };\n\n    \n        const isMount = useIsMount();\n      \n        useEffect(() => {\n          if (!isMount && tasks.length>=1) {\n            let howManyTaskIsDone = 0;\n            for(let i =0; i<=tasks.length-1; i++){\n                 if(tasks[i].task.isDone == true){\n                    howManyTaskIsDone+=1\n                    setTaskDone(howManyTaskIsDone);\n                    }\n            } \n          }\n        }, [tasks]);\n      \n\n\n    \n\n        \n\n    const setAsDone = (e) => {\n         db.collection(user.displayName).doc(\"ToDoList\").collection(todayDate).doc(e.target.id)\n         .update({isDone: true})\n    }\n    \n\n    \n    return (\n    <div className=\"toDoList__wrapper\">{ user.displayName?\n    <div className=\"toDoList__list\">\n             \n            {tasks.map((task) => (\n                    <span> \n\n                    { task.task.isDone ?\n                    <div className=\"boxes\" >\n                        <input type=\"checkbox\" id={task.id} onClick={setAsDone} checked />\n                        <label id={task.id} htmlFor={task.id} onClick={setAsDone}>{task.task.text}</label> \n                    </div>\n                    :\n                    <div className=\"boxes\" >\n                        <input type=\"checkbox\" id={task.id} onClick={setAsDone} />\n                        <label id={task.id} htmlFor={task.id} onClick={setAsDone}>{task.task.text}</label> \n                    </div>\n\n                        } \n                       \n                    \n\n                        \n                    </span>\n                )\n                \n                )}\n            \n        \n        <div className=\"toDoList__addTask\">\n            <input className=\"toDoList__input\" type=\"text\" value={newTaskValue} onChange={e => setTask(e.target.value)}></input>\n            <button className=\"toDoList__button\" onClick={addTask}><b>ADD TASK</b></button>\n        </div>\n    </div>\n:<h1>Please refresh the page</h1>}</div>\n    )\n\n\n} "]},"metadata":{},"sourceType":"module"}