{"ast":null,"code":"var _jsxFileName = \"/Users/kamil/Desktop/Programowanie/ygo/src/components/todo_chart/ToDoChart.js\";\nimport React, { useState, useEffect } from 'react';\nimport './ToDoChart.css';\nimport { db } from '../../firebase.js';\nimport firebase from \"firebase\";\nimport { XYPlot, XAxis, YAxis, VerticalGridLines, HorizontalGridLines, VerticalRectSeries } from 'react-vis';\nexport default function ToDoList({\n  user\n}) {\n  const [tasks, setTasks] = useState([]);\n  const today = new Date();\n  const todayDate = String(today.getDate()).padStart(2, '0') + \"_\" + String(today.getMonth() + 1).padStart(2, '0');\n  useEffect(() => {\n    //function to download task from today.\n    if (user !== undefined) {\n      db.collection(user.displayName).doc(\"ToDoList\").collection(todayDate) //todayDate\n      .orderBy(\"timestamp\", \"desc\").onSnapshot(snapshot => {\n        setTasks(snapshot.docs.map(doc => doc.data()));\n      });\n    }\n  }, [user]);\n  const timestamp = new Date(\"May 23 2017\").getTime();\n  const ONE_DAY = 86400000;\n  const DATA = [{\n    x0: 0,\n    x: ONE_DAY,\n    y: \"ABC\",\n    color: \"green\"\n  }, {\n    x0: ONE_DAY,\n    x: ONE_DAY * 2,\n    y: \"ABC\",\n    color: \"red\"\n  }, {\n    x0: ONE_DAY * 2,\n    x: ONE_DAY * 3,\n    y: \"ABC\",\n    color: \"pink\"\n  }].map(el => ({\n    x0: el.x0 + timestamp,\n    x: el.x + timestamp,\n    y: el.y\n  }));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"toDoChart__wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(XYPlot, {\n    xDomain: [timestamp - 2 * ONE_DAY, timestamp + 10 * ONE_DAY],\n    yDomain: [0, 100],\n    xType: \"time\",\n    width: 1200,\n    height: 300,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(VerticalGridLines, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(HorizontalGridLines, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(VerticalRectSeries, {\n    data: DATA,\n    style: {\n      stroke: '#fff'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/kamil/Desktop/Programowanie/ygo/src/components/todo_chart/ToDoChart.js"],"names":["React","useState","useEffect","db","firebase","XYPlot","XAxis","YAxis","VerticalGridLines","HorizontalGridLines","VerticalRectSeries","ToDoList","user","tasks","setTasks","today","Date","todayDate","String","getDate","padStart","getMonth","undefined","collection","displayName","doc","orderBy","onSnapshot","snapshot","docs","map","data","timestamp","getTime","ONE_DAY","DATA","x0","x","y","color","el","stroke"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './ToDoChart.css'\nimport { db } from '../../firebase.js'\nimport firebase from \"firebase\"\nimport {\n    XYPlot,\n    XAxis,\n    YAxis,\n    VerticalGridLines,\n    HorizontalGridLines,\n    VerticalRectSeries\n  } from 'react-vis';\n\nexport default function ToDoList({user}) {\n    \n    const [tasks, setTasks] = useState([])\n\n    const today = new Date()\n    const todayDate = String(today.getDate()).padStart(2, '0') + \"_\" + String(today.getMonth() + 1).padStart(2, '0'); \n\n     useEffect(() => {  //function to download task from today.\n        if(user!==undefined){   \n             db \n                .collection(user.displayName)\n                .doc(\"ToDoList\")\n                .collection(todayDate) //todayDate\n                .orderBy(\"timestamp\", \"desc\")\n                .onSnapshot((snapshot) =>{\n                    setTasks(snapshot.docs.map((doc) => doc.data()));\n                });\n            }\n       \n    }, [user])\n\n\n    const timestamp = new Date(\"May 23 2017\").getTime();\n    const ONE_DAY = 86400000;\n\nconst DATA = [\n  { x0: 0, x: ONE_DAY, y: \"ABC\", color: \"green\" },\n  { x0: ONE_DAY, x: ONE_DAY * 2, y: \"ABC\", color: \"red\" },\n  { x0: ONE_DAY * 2, x: ONE_DAY * 3, y: \"ABC\", color: \"pink\" }\n  \n].map(el => ({x0: el.x0 + timestamp, x: el.x + timestamp, y: el.y}));\n    \n    \n    return (\n    <div className=\"toDoChart__wrapper\">\n    <XYPlot\n      xDomain={[timestamp - 2 * ONE_DAY, timestamp + 10 * ONE_DAY]}\n      yDomain={[0, 100]}\n      xType=\"time\"\n      width={1200}\n      height={300}\n    >\n      <VerticalGridLines />\n      <HorizontalGridLines />\n      <XAxis />\n      <YAxis />\n      <VerticalRectSeries data={DATA} style={{stroke: '#fff'}} />\n    </XYPlot>\n    </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}