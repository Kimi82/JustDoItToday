{"ast":null,"code":"var _jsxFileName = \"/Users/kamil/Desktop/Programowanie/ygo/src/components/ToDoContext/ToDoContext.js\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport { db, auth } from './firebase.js';\nconst [tasks, setTasks] = useState([]);\nconst [doneTasks, setTaskDone] = useState(0);\nexport const ToDoContext = React.createContext(defaultValue);\n\nconst ToDoProvider = () => {\n  useEffect(() => {\n    //function to download task from today.\n    if (user != undefined) {\n      db.collection(user.displayName).doc(\"ToDoList\").collection(todayDate) //todayDate\n      .orderBy(\"timestamp\", \"desc\").onSnapshot(snapshot => {\n        setTasks(snapshot.docs.map(doc => ({\n          id: doc.id,\n          task: doc.data()\n        })));\n      });\n    }\n  }, [user]);\n\n  const useIsMount = () => {\n    //function to return, than first render or no\n    const isMountRef = useRef(true);\n    useEffect(() => {\n      isMountRef.current = false;\n    }, []);\n    return isMountRef.current;\n  };\n\n  const isMount = useIsMount();\n  useEffect(() => {\n    if (!isMount && tasks.length >= 1) {\n      let howManyTaskIsDone = 0;\n\n      for (let i = 0; i <= tasks.length - 1; i++) {\n        if (tasks[i].task.isDone == true) {\n          howManyTaskIsDone += 1;\n          setTaskDone(howManyTaskIsDone);\n        }\n      }\n    }\n  }, [tasks]);\n  const store = {\n    tasks: tasks,\n    doneTasks: doneTasks,\n    pairing: [pairing, setPairing]\n  };\n  return /*#__PURE__*/React.createElement(ToDoContext.Provider, {\n    value: store,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  });\n};","map":{"version":3,"sources":["/Users/kamil/Desktop/Programowanie/ygo/src/components/ToDoContext/ToDoContext.js"],"names":["React","useState","useEffect","useContext","db","auth","tasks","setTasks","doneTasks","setTaskDone","ToDoContext","createContext","defaultValue","ToDoProvider","user","undefined","collection","displayName","doc","todayDate","orderBy","onSnapshot","snapshot","docs","map","id","task","data","useIsMount","isMountRef","useRef","current","isMount","length","howManyTaskIsDone","i","isDone","store","pairing","setPairing"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,EAAoCC,UAApC,QAAqD,OAArD;AACA,SAASC,EAAT,EAAaC,IAAb,QAAyB,eAAzB;AAEA,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;AACA,MAAM,CAACO,SAAD,EAAYC,WAAZ,IAA2BR,QAAQ,CAAC,CAAD,CAAzC;AAIA,OAAO,MAAMS,WAAW,GAAGV,KAAK,CAACW,aAAN,CAAoBC,YAApB,CAApB;;AACP,MAAMC,YAAY,GAAG,MAAM;AAEvBX,EAAAA,SAAS,CAAC,MAAM;AAAG;AACf,QAAGY,IAAI,IAAEC,SAAT,EAAmB;AACfX,MAAAA,EAAE,CACGY,UADL,CACgBF,IAAI,CAACG,WADrB,EAEKC,GAFL,CAES,UAFT,EAGKF,UAHL,CAGgBG,SAHhB,EAG2B;AAH3B,OAIKC,OAJL,CAIa,WAJb,EAI0B,MAJ1B,EAKKC,UALL,CAKiBC,QAAD,IAAa;AACrBf,QAAAA,QAAQ,CAACe,QAAQ,CAACC,IAAT,CAAcC,GAAd,CAAkBN,GAAG,KAAK;AAC/BO,UAAAA,EAAE,EAAEP,GAAG,CAACO,EADuB;AAE/BC,UAAAA,IAAI,EAAER,GAAG,CAACS,IAAJ;AAFyB,SAAL,CAArB,CAAD,CAAR;AAIK,OAVb;AAWC;AAER,GAfQ,EAeN,CAACb,IAAD,CAfM,CAAT;;AAkBA,QAAMc,UAAU,GAAG,MAAM;AAAE;AACzB,UAAMC,UAAU,GAAGC,MAAM,CAAC,IAAD,CAAzB;AACA5B,IAAAA,SAAS,CAAC,MAAM;AACd2B,MAAAA,UAAU,CAACE,OAAX,GAAqB,KAArB;AACD,KAFQ,EAEN,EAFM,CAAT;AAGA,WAAOF,UAAU,CAACE,OAAlB;AACD,GAND;;AASE,QAAMC,OAAO,GAAGJ,UAAU,EAA1B;AAEA1B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAAC8B,OAAD,IAAY1B,KAAK,CAAC2B,MAAN,IAAc,CAA9B,EAAiC;AAC/B,UAAIC,iBAAiB,GAAG,CAAxB;;AACA,WAAI,IAAIC,CAAC,GAAE,CAAX,EAAcA,CAAC,IAAE7B,KAAK,CAAC2B,MAAN,GAAa,CAA9B,EAAiCE,CAAC,EAAlC,EAAqC;AAChC,YAAG7B,KAAK,CAAC6B,CAAD,CAAL,CAAST,IAAT,CAAcU,MAAd,IAAwB,IAA3B,EAAgC;AAC7BF,UAAAA,iBAAiB,IAAE,CAAnB;AACAzB,UAAAA,WAAW,CAACyB,iBAAD,CAAX;AACC;AACR;AACF;AACF,GAVQ,EAUN,CAAC5B,KAAD,CAVM,CAAT;AAgBA,QAAM+B,KAAK,GAAG;AACZ/B,IAAAA,KAAK,EAAEA,KADK;AAEZE,IAAAA,SAAS,EAAEA,SAFC;AAGZ8B,IAAAA,OAAO,EAAE,CAACA,OAAD,EAAUC,UAAV;AAHG,GAAd;AAMA,sBACI,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEF,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAKL,CA1DD","sourcesContent":["import React, {useState ,useEffect, useContext} from 'react';\nimport { db, auth } from './firebase.js' \n\nconst [tasks, setTasks] = useState([])\nconst [doneTasks, setTaskDone] = useState(0)\n\n\n\nexport const ToDoContext = React.createContext(defaultValue);\nconst ToDoProvider = () => {\n\n    useEffect(() => {  //function to download task from today.\n        if(user!=undefined){   \n            db \n                .collection(user.displayName)\n                .doc(\"ToDoList\")\n                .collection(todayDate) //todayDate\n                .orderBy(\"timestamp\", \"desc\")\n                .onSnapshot((snapshot) =>{\n                    setTasks(snapshot.docs.map(doc => ({\n                        id: doc.id,\n                        task: doc.data()\n                        })));\n                        }) \n            } \n       \n    }, [user])\n    \n    \n    const useIsMount = () => { //function to return, than first render or no\n      const isMountRef = useRef(true);\n      useEffect(() => {\n        isMountRef.current = false;\n      }, []);\n      return isMountRef.current;\n    };\n    \n    \n      const isMount = useIsMount();\n    \n      useEffect(() => {\n        if (!isMount && tasks.length>=1) {\n          let howManyTaskIsDone = 0;\n          for(let i =0; i<=tasks.length-1; i++){\n               if(tasks[i].task.isDone == true){\n                  howManyTaskIsDone+=1\n                  setTaskDone(howManyTaskIsDone);\n                  }\n          } \n        }\n      }, [tasks]);\n\n\n      \n\n\n      const store = {\n        tasks: tasks,\n        doneTasks: doneTasks,\n        pairing: [pairing, setPairing],\n      }\n \n      return(\n          <ToDoContext.Provider value={store}/>\n      )\n\n\n}\n"]},"metadata":{},"sourceType":"module"}