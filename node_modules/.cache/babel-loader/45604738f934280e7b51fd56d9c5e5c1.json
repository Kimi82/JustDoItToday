{"ast":null,"code":"var _jsxFileName = \"/Users/kamil/Desktop/Programowanie/ygo/src/components/todo_chart/ToDoChart.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport './ToDoChart.css';\nimport { db } from '../../firebase.js';\nimport firebase from \"firebase\";\nimport { Bar } from 'react-chartjs-2';\nexport default function ToDoList({\n  user\n}) {\n  const [tasks, setTasks] = useState([]);\n  const [doneTasks, setTaskDone] = useState(0);\n  const [doneTaskPercent, setPercent] = useState(1);\n  const [chartData, setChartData] = useState([]);\n  let [chartDataExist, setChartDataExist] = useState(false);\n  const today = new Date();\n  const todayDate = String(today.getDate()).padStart(2, '0') + \"_\" + String(today.getMonth() + 1).padStart(2, '0');\n\n  const GetDates = () => {\n    var aryDates = [];\n    var dbDates = [];\n\n    for (var i = -6; i <= 0; i++) {\n      var currentDate = new Date();\n      currentDate.setDate(startDate.getDate() + i);\n      aryDates.push(DayAsString(currentDate.getDay()) + \", \" + currentDate.getDate());\n      dbDates.push(String(currentDate.getDate()).padStart(2, '0') + \"_\" + String(currentDate.getMonth() + 1).padStart(2, '0'));\n    }\n\n    return [aryDates, dbDates];\n  };\n\n  useEffect(() => {\n    setPercent(doneTasks / tasks.length * 100);\n  }, [tasks, doneTasks]);\n\n  const DayAsString = dayIndex => {\n    var weekdays = new Array(7);\n    weekdays[0] = \"Sunday\";\n    weekdays[1] = \"Monday\";\n    weekdays[2] = \"Tuesday\";\n    weekdays[3] = \"Wednesday\";\n    weekdays[4] = \"Thursday\";\n    weekdays[5] = \"Friday\";\n    weekdays[6] = \"Saturday\";\n    return weekdays[dayIndex];\n  };\n\n  var startDate = today;\n  const dates = GetDates();\n  var aryDates = dates[0];\n  useEffect(() => {\n    //function to download task from today.\n    if (user != undefined) {\n      db.collection(user.displayName).doc(\"ToDoList\").collection(todayDate) //todayDate\n      .orderBy(\"timestamp\", \"desc\").onSnapshot(snapshot => {\n        setTasks(snapshot.docs.map(doc => ({\n          id: doc.id,\n          task: doc.data()\n        })));\n      });\n    }\n  }, [user]);\n  const dbDates = dates[1].reverse();\n  const chartArray = [];\n  useEffect(() => {\n    //function to download task from today.\n    if (user != undefined) {\n      for (let i = 0; i <= dbDates.length - 1; i++) {\n        db.collection(user.displayName).doc(\"ToDoList\").collection(dbDates[i]) //todayDate\n        .orderBy(\"timestamp\", \"desc\").onSnapshot(snapshot => {\n          snapshot.docs.map(doc => {\n            chartArray.push({\n              id: doc.id,\n              data: doc.data()\n            });\n            setChartData(chartArray);\n          });\n        });\n      }\n    }\n  }, [tasks]); //need to change IT!!!\n\n  const useIsMount = () => {\n    //function to return, than first render or no\n    const isMountRef = useRef(true);\n    useEffect(() => {\n      isMountRef.current = false;\n    }, []);\n    return isMountRef.current;\n  };\n\n  const isMount = useIsMount();\n  useEffect(() => {\n    if (!isMount && tasks.length >= 1) {\n      let howManyTaskIsDone = 0;\n\n      for (let i = 0; i <= tasks.length - 1; i++) {\n        if (tasks[i].task.isDone == true) {\n          howManyTaskIsDone += 1;\n          setTaskDone(howManyTaskIsDone);\n        }\n      }\n    }\n  }, [tasks]);\n  const chartFinalArray = [{\n    id: dbDates[0],\n    allTasks: 0,\n    doneTasks: 0\n  }, {\n    id: dbDates[1],\n    allTasks: 0,\n    doneTasks: 0\n  }, {\n    id: dbDates[2],\n    allTasks: 0,\n    doneTasks: 0\n  }, {\n    id: dbDates[3],\n    allTasks: 0,\n    doneTasks: 0\n  }, {\n    id: dbDates[4],\n    allTasks: 0,\n    doneTasks: 0\n  }, {\n    id: dbDates[5],\n    allTasks: 0,\n    doneTasks: 0\n  }];\n\n  const getChartData = () => {\n    for (let i = 0; i <= chartData.length - 1; i++) {\n      let timestamp = new Date(chartData[i][\"data\"][\"timestamp\"][\"seconds\"] * 1000);\n      let date = String(timestamp.getDate()).padStart(2, '0') + \"_\" + String(timestamp.getMonth() + 1).padStart(2, '0');\n\n      switch (date) {\n        case dbDates[0]:\n          if (chartData[i]['data']['isDone'] == true) chartFinalArray[0]['doneTasks'] += 1;\n          chartFinalArray[0]['allTasks'] += 1;\n          break;\n\n        case dbDates[1]:\n          if (chartData[i]['data']['isDone'] == true) chartFinalArray[1]['doneTasks'] += 1;\n          chartFinalArray[1]['allTasks'] += 1;\n          break;\n\n        case dbDates[2]:\n          if (chartData[i]['data']['isDone'] == true) chartFinalArray[2]['doneTasks'] += 1;\n          chartFinalArray[2]['allTasks'] += 1;\n          break;\n\n        case dbDates[3]:\n          if (chartData[i]['data']['isDone'] == true) chartFinalArray[3]['doneTasks'] += 1;\n          chartFinalArray[3]['allTasks'] += 1;\n          break;\n\n        case dbDates[4]:\n          if (chartData[i]['data']['isDone'] == true) chartFinalArray[4]['doneTasks'] += 1;\n          chartFinalArray[4]['allTasks'] += 1;\n          break;\n\n        case dbDates[5]:\n          if (chartData[i]['data']['isDone'] == true) chartFinalArray[4]['doneTasks'] += 1;\n          chartFinalArray[4]['allTasks'] += 1;\n          break;\n      }\n\n      setChartDataExist(true);\n    }\n  };\n\n  const state = {\n    labels: [aryDates[0], aryDates[1], aryDates[2], aryDates[3], aryDates[4], aryDates[5], \"TODAY\"],\n    datasets: [{\n      label: chartDataExist,\n      backgroundColor: 'rgba(75,192,192,1)',\n      borderColor: 'rgba(0,0,0,1)',\n      borderWidth: 2,\n      data: [[0, chartFinalArray[5][\"doneTasks\"]], [0, chartFinalArray[4][\"doneTasks\"]], [0, chartFinalArray[3][\"doneTasks\"]], [0, chartFinalArray[2][\"doneTasks\"]], [0, chartFinalArray[1][\"doneTasks\"]], [0, chartFinalArray[0][\"doneTasks\"]], [0, Math.round(doneTaskPercent)]]\n    }]\n  };\n\n  function hoverTest() {\n    getChartData(); //chartDataExist==true?console.log(chartFinalArray):console.log(\"no no no\")\n\n    console.log(chartFinalArray);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"toDoChart__wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 2\n    }\n  }, chartDataExist == true ? /*#__PURE__*/React.createElement(Bar, {\n    data: state,\n    options: {\n      title: {\n        display: true,\n        text: 'Average Rainfall per month',\n        fontSize: 20\n      },\n      legend: {\n        display: true,\n        position: 'right'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 12\n    }\n  }) : /*#__PURE__*/React.createElement(\"button\", {\n    onClick: hoverTest,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 12\n    }\n  }, \"Click me fucking idiot\")));\n}","map":{"version":3,"sources":["/Users/kamil/Desktop/Programowanie/ygo/src/components/todo_chart/ToDoChart.js"],"names":["React","useState","useEffect","useRef","db","firebase","Bar","ToDoList","user","tasks","setTasks","doneTasks","setTaskDone","doneTaskPercent","setPercent","chartData","setChartData","chartDataExist","setChartDataExist","today","Date","todayDate","String","getDate","padStart","getMonth","GetDates","aryDates","dbDates","i","currentDate","setDate","startDate","push","DayAsString","getDay","length","dayIndex","weekdays","Array","dates","undefined","collection","displayName","doc","orderBy","onSnapshot","snapshot","docs","map","id","task","data","reverse","chartArray","useIsMount","isMountRef","current","isMount","howManyTaskIsDone","isDone","chartFinalArray","allTasks","getChartData","timestamp","date","state","labels","datasets","label","backgroundColor","borderColor","borderWidth","Math","round","hoverTest","console","log","title","display","text","fontSize","legend","position"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport './ToDoChart.css'\nimport { db } from '../../firebase.js'\nimport firebase from \"firebase\"\nimport {Bar} from 'react-chartjs-2';\nexport default function ToDoList({user}) {\n    \n    const [tasks, setTasks] = useState([])\n    const [doneTasks, setTaskDone] = useState(0)\n    const [doneTaskPercent, setPercent] = useState(1)\n    const [chartData, setChartData] = useState([])\n    let [chartDataExist, setChartDataExist] = useState(false)\n\n\n    const today = new Date()\n    const todayDate = String(today.getDate()).padStart(2, '0') + \"_\" + String(today.getMonth() + 1).padStart(2, '0'); \n\n\n    const GetDates = () => {\n      var aryDates = [];\n      var dbDates = [];\n      for (var i = -6; i <= 0; i++) {\n          var currentDate = new Date();\n          currentDate.setDate(startDate.getDate() + i);\n          aryDates.push(DayAsString(currentDate.getDay()) + \", \" + currentDate.getDate());\n          dbDates.push(String(currentDate.getDate()).padStart(2, '0') + \"_\" + String(currentDate.getMonth() + 1).padStart(2, '0'));\n      }\n      \n  \n      return [aryDates, dbDates];\n  }\n\n  useEffect(() =>{\n    setPercent(doneTasks/tasks.length*100)\n   \n   },\n   [tasks, doneTasks])\n\n  \n   const DayAsString = (dayIndex) => {\n      var weekdays = new Array(7);\n      weekdays[0] = \"Sunday\";\n      weekdays[1] = \"Monday\";\n      weekdays[2] = \"Tuesday\";\n      weekdays[3] = \"Wednesday\";\n      weekdays[4] = \"Thursday\";\n      weekdays[5] = \"Friday\";\n      weekdays[6] = \"Saturday\";\n  \n      return weekdays[dayIndex];\n  }\n  \n  var startDate = today; \n  const dates = GetDates()\n  var aryDates = dates[0]\n\n  useEffect(() => {  //function to download task from today.\n    if(user!=undefined){   \n        db \n            .collection(user.displayName)\n            .doc(\"ToDoList\")\n            .collection(todayDate) //todayDate\n            .orderBy(\"timestamp\", \"desc\")\n            .onSnapshot((snapshot) =>{\n                setTasks(snapshot.docs.map(doc => ({\n                    id: doc.id,\n                    task: doc.data()\n                    })));\n                    }) \n        } \n   \n}, [user])\nconst dbDates = dates[1].reverse()\n\nconst chartArray = []\nuseEffect(() => {  //function to download task from today.\n  if(user!=undefined){ \n    for(let i=0; i<=dbDates.length-1; i++){\n      db \n          .collection(user.displayName)\n          .doc(\"ToDoList\")\n          .collection(dbDates[i]) //todayDate\n          .orderBy(\"timestamp\", \"desc\")\n          .onSnapshot((snapshot) =>{\n            ((snapshot.docs.map(doc => {\n              chartArray.push({id:doc.id, data: doc.data()})\n              setChartData(chartArray)\n              })));\n        })}}}, [tasks])  //need to change IT!!!\n\n\n\nconst useIsMount = () => { //function to return, than first render or no\n    const isMountRef = useRef(true);\n    useEffect(() => {\n      isMountRef.current = false;\n    }, []);\n    return isMountRef.current;\n  };\n\n\n    const isMount = useIsMount();\n  \n    useEffect(() => {\n      if (!isMount && tasks.length>=1) {\n        let howManyTaskIsDone = 0;\n        \n        for(let i =0; i<=tasks.length-1; i++){\n             if(tasks[i].task.isDone == true){\n                howManyTaskIsDone+=1\n                setTaskDone(howManyTaskIsDone);\n                }\n        }\n\n      }\n    }, [tasks]);\n\n\n\n\n\n    \nconst chartFinalArray = [\n  {\n    id: dbDates[0],\n    allTasks: 0,\n    doneTasks:0\n  },\n  {\n    id: dbDates[1],\n    allTasks: 0,\n    doneTasks:0\n  },\n  {\n    id: dbDates[2],\n    allTasks: 0,\n    doneTasks:0\n  },\n  {\n    id: dbDates[3],\n    allTasks: 0,\n    doneTasks:0\n  },\n  {\n    id: dbDates[4],\n    allTasks: 0,\n    doneTasks:0\n  },\n  {\n    id: dbDates[5],\n    allTasks: 0,\n    doneTasks:0\n  }\n]\n\n   const getChartData = () =>{\n    for(let i=0; i<=chartData.length-1; i++){\n      \n        let timestamp = new Date(chartData[i][\"data\"][\"timestamp\"][\"seconds\"]*1000)\n        let date = String(timestamp.getDate()).padStart(2, '0') + \"_\" + String(timestamp.getMonth() + 1).padStart(2, '0');\n      \n      switch(date){\n          case dbDates[0]:\n            if (chartData[i]['data']['isDone'] == true) chartFinalArray[0]['doneTasks'] +=1\n            chartFinalArray[0]['allTasks']+=1\n            break;\n          case dbDates[1]:\n            if (chartData[i]['data']['isDone'] == true) chartFinalArray[1]['doneTasks'] +=1\n            chartFinalArray[1]['allTasks']+=1\n            break;\n          case dbDates[2]:\n            if (chartData[i]['data']['isDone'] == true) chartFinalArray[2]['doneTasks'] +=1\n            chartFinalArray[2]['allTasks']+=1\n            break;\n          case dbDates[3]:\n            if (chartData[i]['data']['isDone'] == true) chartFinalArray[3]['doneTasks'] +=1\n            chartFinalArray[3]['allTasks']+=1\n            break;\n          case dbDates[4]:\n            if (chartData[i]['data']['isDone'] == true) chartFinalArray[4]['doneTasks'] +=1\n            chartFinalArray[4]['allTasks']+=1\n            break;\n          case dbDates[5]:\n            if (chartData[i]['data']['isDone'] == true) chartFinalArray[4]['doneTasks'] +=1\n            chartFinalArray[4]['allTasks']+=1\n            break;\n        } setChartDataExist(true);\n        }\n        \n      }\n\n\n  \n      const state = {\n        labels: [aryDates[0], aryDates[1], aryDates[2],aryDates[3], aryDates[4], aryDates[5], \"TODAY\"],\n        datasets: [\n          {\n            label: chartDataExist,\n            backgroundColor: 'rgba(75,192,192,1)',\n            borderColor: 'rgba(0,0,0,1)',\n            borderWidth: 2,\n            data: [\n              [0,chartFinalArray[5][\"doneTasks\"]],\n              [0,chartFinalArray[4][\"doneTasks\"]],\n              [0,chartFinalArray[3][\"doneTasks\"]],\n              [0,chartFinalArray[2][\"doneTasks\"]],\n              [0,chartFinalArray[1][\"doneTasks\"]],\n              [0,chartFinalArray[0][\"doneTasks\"]],\n              [0,Math.round(doneTaskPercent)]] \n          }\n        ]\n      }\n      function hoverTest(){\n        getChartData()\n        //chartDataExist==true?console.log(chartFinalArray):console.log(\"no no no\")\n        console.log(chartFinalArray)\n      }\n      \n      \n    return (\n    <div className=\"toDoChart__wrapper\">\n <div>\n        {\n          chartDataExist==true \n          ?<Bar\n          data={state}\n          options={{\n            title:{\n              display:true,\n              text:'Average Rainfall per month',\n              fontSize:20\n            },\n            legend:{\n              display:true,\n              position:'right'\n            }\n          }}\n        />:<button onClick={hoverTest}>Click me fucking idiot</button>}\n      </div>\n    </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}