{"ast":null,"code":"var _jsxFileName = \"/Users/kamil/Desktop/Programowanie/ygo/src/components/todo_chart/ToDoChart.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport './ToDoChart.css';\nimport { db } from '../../firebase.js';\nimport firebase from \"firebase\";\nimport { Bar } from 'react-chartjs-2';\nexport default function ToDoList({\n  user\n}) {\n  const [tasks, setTasks] = useState([]);\n  const [doneTasks, setTaskDone] = useState(0);\n  const [doneTaskPercent, setPercent] = useState(0);\n  const today = new Date();\n  const todayDate = String(today.getDate()).padStart(2, '0') + \"_\" + String(today.getMonth() + 1).padStart(2, '0');\n\n  const GetDates = () => {\n    var aryDates = [];\n\n    for (var i = -6; i <= 0; i++) {\n      var currentDate = new Date();\n      currentDate.setDate(startDate.getDate() + i);\n      aryDates.push(DayAsString(currentDate.getDay()) + \", \" + currentDate.getDate());\n    }\n\n    return aryDates;\n  };\n\n  useEffect(() => {\n    //function to download task from today.\n    if (user != undefined) {\n      db.collection(user.displayName).doc(\"ToDoList\").onSnapshot(snapshot => {\n        snapshot.docs.map(doc => {\n          console.log(doc.data());\n        });\n      });\n    }\n  }, [user]);\n  useEffect(async () => {\n    if (user != undefined) {\n      const snapshot = await firebase.firestore().collection(user.displayName).doc(\"ToDoList\").get();\n      console.log(snapshot.docs.map(doc => doc.data()));\n      db.collection(user.displayName).doc(\"ToDoList\") //.orderBy(\"timestamp\", \"desc\")\n      .onSnapshot(snapshot => {\n        console.log(snapshot);\n      });\n    }\n  }, [user]);\n\n  const useIsMount = () => {\n    //function to return, than first render or no\n    const isMountRef = useRef(true);\n    useEffect(() => {\n      isMountRef.current = false;\n    }, []);\n    return isMountRef.current;\n  };\n\n  const isMount = useIsMount();\n  useEffect(() => {\n    if (!isMount && tasks.length >= 1) {\n      let howManyTaskIsDone = 0;\n\n      for (let i = 0; i <= tasks.length - 1; i++) {\n        if (tasks[i].task.isDone == true) {\n          howManyTaskIsDone += 1;\n          setTaskDone(howManyTaskIsDone);\n        }\n      }\n    }\n  }, [tasks]);\n\n  function mouseOver() {\n    console.log(doneTaskPercent);\n  }\n\n  useEffect(() => {\n    setPercent(Math.round(doneTasks / tasks.length * 100));\n  }, [tasks, doneTasks]);\n\n  const DayAsString = dayIndex => {\n    var weekdays = new Array(7);\n    weekdays[0] = \"Sunday\";\n    weekdays[1] = \"Monday\";\n    weekdays[2] = \"Tuesday\";\n    weekdays[3] = \"Wednesday\";\n    weekdays[4] = \"Thursday\";\n    weekdays[5] = \"Friday\";\n    weekdays[6] = \"Saturday\";\n    return weekdays[dayIndex];\n  };\n\n  var startDate = today;\n  var aryDates = GetDates(); //function to return today + 6 past day\n\n  const state = {\n    labels: [aryDates[0], aryDates[1], aryDates[2], aryDates[3], aryDates[4], aryDates[5], \"TODAY \" + doneTaskPercent + \"%\"],\n    datasets: [{\n      label: 'Rainfall',\n      backgroundColor: 'rgba(75,192,192,1)',\n      borderColor: 'rgba(0,0,0,1)',\n      borderWidth: 2,\n      data: [[0, 10], [0, 6], [0, 4], [0, 3], [0, 7], [1, 6], [0, doneTaskPercent]]\n    }]\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    onMouseEnter: mouseOver,\n    className: \"toDoChart__wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 2\n    }\n  }, /*#__PURE__*/React.createElement(Bar, {\n    data: state,\n    options: {\n      title: {\n        display: true,\n        text: 'Average Rainfall per month',\n        fontSize: 20\n      },\n      legend: {\n        display: true,\n        position: 'right'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/kamil/Desktop/Programowanie/ygo/src/components/todo_chart/ToDoChart.js"],"names":["React","useState","useEffect","useRef","db","firebase","Bar","ToDoList","user","tasks","setTasks","doneTasks","setTaskDone","doneTaskPercent","setPercent","today","Date","todayDate","String","getDate","padStart","getMonth","GetDates","aryDates","i","currentDate","setDate","startDate","push","DayAsString","getDay","undefined","collection","displayName","doc","onSnapshot","snapshot","docs","map","console","log","data","firestore","get","useIsMount","isMountRef","current","isMount","length","howManyTaskIsDone","task","isDone","mouseOver","Math","round","dayIndex","weekdays","Array","state","labels","datasets","label","backgroundColor","borderColor","borderWidth","title","display","text","fontSize","legend","position"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport './ToDoChart.css'\nimport { db } from '../../firebase.js'\nimport firebase from \"firebase\"\nimport {Bar} from 'react-chartjs-2';\nexport default function ToDoList({user}) {\n    \n    const [tasks, setTasks] = useState([])\n    const [doneTasks, setTaskDone] = useState(0)\n    const [doneTaskPercent, setPercent] = useState(0)\n    \n\n    const today = new Date()\n    const todayDate = String(today.getDate()).padStart(2, '0') + \"_\" + String(today.getMonth() + 1).padStart(2, '0'); \n\n\n\n    const GetDates = () => {\n      var aryDates = [];\n  \n      for (var i = -6; i <= 0; i++) {\n          var currentDate = new Date();\n          currentDate.setDate(startDate.getDate() + i);\n          aryDates.push(DayAsString(currentDate.getDay()) + \", \" + currentDate.getDate());\n      }\n  \n      return aryDates;\n  }\n\n    useEffect(() => {  //function to download task from today.\n        if(user!=undefined){   \n            db \n                .collection(user.displayName)\n                .doc(\"ToDoList\")\n                .onSnapshot((snapshot) =>{\n                    snapshot.docs.map(doc => {\n                      console.log(doc.data())\n                        });\n                        }) \n            } \n       \n    }, [user])\n\n\n   \n   \n    useEffect( async () => {  \n\n      if(user!=undefined){   \n\n        const snapshot = await firebase.firestore().collection(user.displayName).doc(\"ToDoList\").get()\n        console.log(snapshot.docs.map(doc => doc.data()));\n\n          db \n              .collection(user.displayName)\n              .doc(\"ToDoList\")\n              //.orderBy(\"timestamp\", \"desc\")\n              .onSnapshot((snapshot) =>{\n                 console.log(snapshot)\n                      }) \n          } \n     \n  }, [user])\n\n\n\n\n\n\nconst useIsMount = () => { //function to return, than first render or no\n    const isMountRef = useRef(true);\n    useEffect(() => {\n      isMountRef.current = false;\n    }, []);\n    return isMountRef.current;\n  };\n\n\n    const isMount = useIsMount();\n  \n    useEffect(() => {\n      if (!isMount && tasks.length>=1) {\n        let howManyTaskIsDone = 0;\n        for(let i =0; i<=tasks.length-1; i++){\n             if(tasks[i].task.isDone == true){\n                howManyTaskIsDone+=1\n                setTaskDone(howManyTaskIsDone);\n                }\n        } \n      }\n    }, [tasks]);\n\nfunction mouseOver (){\n  console.log(doneTaskPercent)\n}\n\n\n\n   useEffect(() =>{\n     setPercent(Math.round(doneTasks/tasks.length*100))\n   \n    },\n    [tasks, doneTasks])\n\n  \n   const DayAsString = (dayIndex) => {\n      var weekdays = new Array(7);\n      weekdays[0] = \"Sunday\";\n      weekdays[1] = \"Monday\";\n      weekdays[2] = \"Tuesday\";\n      weekdays[3] = \"Wednesday\";\n      weekdays[4] = \"Thursday\";\n      weekdays[5] = \"Friday\";\n      weekdays[6] = \"Saturday\";\n  \n      return weekdays[dayIndex];\n  }\n  \n  var startDate = today; \n  var aryDates = GetDates(); \n\n//function to return today + 6 past day\nconst state = {\n  labels: [aryDates[0], aryDates[1], aryDates[2],aryDates[3], aryDates[4], aryDates[5], \"TODAY \" + doneTaskPercent+\"%\"],\n  datasets: [\n    {\n      label: 'Rainfall',\n      backgroundColor: 'rgba(75,192,192,1)',\n      borderColor: 'rgba(0,0,0,1)',\n      borderWidth: 2,\n      data: [[0,10], [0,6], [0,4], [0,3], [0,7], [1,6], [0,doneTaskPercent]] \n    }\n  ]\n}\n    \n    return (\n    <div onMouseEnter={mouseOver} className=\"toDoChart__wrapper\">\n <div>\n        <Bar \n          data={state}\n          options={{\n            title:{\n              display:true,\n              text:'Average Rainfall per month',\n              fontSize:20\n            },\n            legend:{\n              display:true,\n              position:'right'\n            }\n          }}\n        />\n      </div>\n    </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}