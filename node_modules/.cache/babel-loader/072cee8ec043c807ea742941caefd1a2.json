{"ast":null,"code":"var _jsxFileName = \"/Users/kamil/Desktop/Programowanie/ygo/src/components/todo_list/ToDoList.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport './ToDoList.css';\nimport { db } from '../../firebase.js';\nimport firebase from \"firebase\";\nexport default function ToDoList({\n  user\n}) {\n  const [newTaskValue, setTask] = useState(\"\");\n  const [tasks, setTasks] = useState([]);\n  const [doneTasks, setTaskDone] = useState(0);\n  const [doneTaskPercent, setPercent] = useState(1);\n  const today = new Date();\n  const todayDate = String(today.getDate()).padStart(2, '0') + \"_\" + String(today.getMonth() + 1).padStart(2, '0');\n\n  const addTask = e => {\n    //function to add task \n    e.preventDefault();\n    db.collection(user.displayName).doc(\"ToDoList\").collection(todayDate).add({\n      text: newTaskValue,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n      isDone: false\n    });\n    setTask('');\n  };\n\n  const onHoverTest = e => {\n    //console.log(doneTaskPercent)\n    console.log(doneTaskPercent); //console.log(doneTasks/tasks.length*100 + \"%\")\n  };\n\n  useEffect(() => {\n    //function to download task from today.\n    if (user != undefined) {\n      db.collection(user.displayName).doc(\"ToDoList\").collection(todayDate) //todayDate\n      .orderBy(\"timestamp\", \"desc\").onSnapshot(snapshot => {\n        setTasks(snapshot.docs.map(doc => ({\n          id: doc.id,\n          task: doc.data()\n        })));\n      });\n    }\n  }, [user]);\n\n  const useIsMount = () => {\n    //function to return, than first render or no\n    const isMountRef = useRef(true);\n    useEffect(() => {\n      isMountRef.current = false;\n    }, []);\n    return isMountRef.current;\n  };\n\n  const isMount = useIsMount();\n  useEffect(() => {\n    if (!isMount && tasks.length >= 1) {\n      let howManyTaskIsDone = 0;\n\n      for (let i = 0; i <= tasks.length - 1; i++) {\n        if (tasks[i].task.isDone == true) {\n          howManyTaskIsDone += 1;\n          setTaskDone(howManyTaskIsDone);\n        }\n      }\n    }\n  }, [tasks]);\n  useEffect(() => {\n    console.log(\"CHUJ\" + doneTasks / tasks.length * 100);\n  }, [doneTasks]);\n\n  const setAsDone = e => {\n    db.collection(user.displayName).doc(\"ToDoList\").collection(todayDate).doc(e.target.id).update({\n      isDone: true\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"toDoList__wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"toDoList__list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, tasks.map(task => /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 21\n    }\n  }, \" \", task.task.isDone ? /*#__PURE__*/React.createElement(\"li\", {\n    className: \"toDoList__item\",\n    value: task.task.text,\n    id: task.id,\n    onClick: setAsDone,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 25\n    }\n  }, task.task.text) : /*#__PURE__*/React.createElement(\"li\", {\n    value: task.task.text,\n    id: task.id,\n    onClick: setAsDone,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 25\n    }\n  }, task.task.text)))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"toDoList__addTask\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: newTaskValue,\n    onChange: e => setTask(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onMouseEnter: onHoverTest,\n    onClick: addTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, \"Add Task\"))));\n}\nexport const zmienna = \"XDDDDDDDDDDDD\";","map":{"version":3,"sources":["/Users/kamil/Desktop/Programowanie/ygo/src/components/todo_list/ToDoList.js"],"names":["React","useState","useEffect","useRef","db","firebase","ToDoList","user","newTaskValue","setTask","tasks","setTasks","doneTasks","setTaskDone","doneTaskPercent","setPercent","today","Date","todayDate","String","getDate","padStart","getMonth","addTask","e","preventDefault","collection","displayName","doc","add","text","timestamp","firestore","FieldValue","serverTimestamp","isDone","onHoverTest","console","log","undefined","orderBy","onSnapshot","snapshot","docs","map","id","task","data","useIsMount","isMountRef","current","isMount","length","howManyTaskIsDone","i","setAsDone","target","update","value","zmienna"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef} from 'react'\nimport './ToDoList.css'\nimport { db } from '../../firebase.js'\nimport firebase from \"firebase\"\n\nexport default function ToDoList({user}) {\n    const [newTaskValue, setTask] = useState(\"\");\n    const [tasks, setTasks] = useState([]);\n    const [doneTasks, setTaskDone] = useState(0)\n    const [doneTaskPercent, setPercent] = useState(1)\n\n    const today = new Date()\n    const todayDate = String(today.getDate()).padStart(2, '0') + \"_\" + String(today.getMonth() + 1).padStart(2, '0');\n\n\n\n    const addTask = (e) => {  //function to add task \n         e.preventDefault();\n         db.collection(user.displayName).doc(\"ToDoList\").collection(todayDate).add({\n             text: newTaskValue,\n             timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n             isDone: false\n         })\n         setTask('');\n     }\n\n     const onHoverTest = (e) =>{ \n        \n       \n       \n        //console.log(doneTaskPercent)\n        console.log(doneTaskPercent)\n         //console.log(doneTasks/tasks.length*100 + \"%\")\n     }\n\n     \n\n    \n     useEffect(() => {  //function to download task from today.\n        if(user!=undefined){   \n            db \n                .collection(user.displayName)\n                .doc(\"ToDoList\")\n                .collection(todayDate) //todayDate\n                .orderBy(\"timestamp\", \"desc\")\n                .onSnapshot((snapshot) =>{\n                    setTasks(snapshot.docs.map(doc => ({\n                        id: doc.id,\n                        task: doc.data()\n                        })));\n                        }) \n                      \n            } \n       \n    }, [user])\n\n\n    const useIsMount = () => { //function to return, than first render or no\n        const isMountRef = useRef(true);\n        useEffect(() => {\n          isMountRef.current = false;\n        }, []);\n        return isMountRef.current;\n      };\n\n    \n        const isMount = useIsMount();\n      \n        useEffect(() => {\n          if (!isMount && tasks.length>=1) {\n            let howManyTaskIsDone = 0;\n            for(let i =0; i<=tasks.length-1; i++){\n                 if(tasks[i].task.isDone == true){\n                    howManyTaskIsDone+=1\n                    setTaskDone(howManyTaskIsDone);\n                    \n                        \n                        \n                    \n                 }\n            } \n          }\n        }, [tasks]);\n      \n\n      useEffect(() =>{console.log(\"CHUJ\"+doneTasks/tasks.length*100)}, [doneTasks])  \n        \n\n    const setAsDone = (e) => {\n        db.collection(user.displayName).doc(\"ToDoList\").collection(todayDate).doc(e.target.id)\n        .update({isDone: true})\n    }\n    \n\n    \n    return (\n    <div className=\"toDoList__wrapper\">\n    <div className=\"toDoList__list\">\n            <ul>\n            {tasks.map((task) => (\n                    <p> { task.task.isDone ?\n                        <li className=\"toDoList__item\" value={task.task.text} id={task.id} onClick={setAsDone}>{task.task.text}</li>:\n                        <li value={task.task.text} id={task.id} onClick={setAsDone}>{task.task.text}</li> \n                        }\n                    </p>\n                )\n                \n                )}\n            </ul>\n        \n        <div className=\"toDoList__addTask\">\n            <input type=\"text\" value={newTaskValue} onChange={e => setTask(e.target.value)}></input>\n            <button onMouseEnter={onHoverTest} onClick={addTask}>Add Task</button>\n    </div>\n    </div>\n    </div>\n    )\n}export const zmienna = \"XDDDDDDDDDDDD\"\n"]},"metadata":{},"sourceType":"module"}