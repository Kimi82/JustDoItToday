{"ast":null,"code":"var _jsxFileName = \"/Users/kamil/Desktop/Programowanie/ygo/src/components/todo_chart/ToDoChart.js\";\nimport React, { useState, useEffect } from 'react';\nimport './ToDoChart.css';\nimport { db } from '../../firebase.js';\nimport firebase from \"firebase\";\nimport { Bar } from 'react-chartjs-2';\nexport default function ToDoList({\n  user\n}) {\n  const [tasks, setTasks] = useState([]);\n  const today = new Date();\n  const todayDate = String(today.getDate()).padStart(2, '0') + \"_\" + String(today.getMonth() + 1).padStart(2, '0');\n  useEffect(() => {\n    //function to download task from today.\n    if (user !== undefined) {\n      db.collection(user.displayName).doc(\"ToDoList\").collection(todayDate) //todayDate\n      .orderBy(\"timestamp\", \"desc\").onSnapshot(snapshot => {\n        setTasks(snapshot.docs.map(doc => doc.data()));\n      });\n    }\n  }, [user]);\n\n  function GetDates(startDate, daysToAdd) {\n    var aryDates = [];\n\n    for (var i = -7; i <= daysToAdd; i++) {\n      var currentDate = new Date();\n      currentDate.setDate(startDate.getDate() + i);\n      aryDates.push(DayAsString(currentDate.getDay()) + \", \" + currentDate.getDate());\n    }\n\n    return aryDates;\n  } // function MonthAsString(monthIndex) {\n  //     var d = new Date();\n  //     // var month = new Array();\n  //     // month[0] = \"January\";\n  //     // month[1] = \"February\";\n  //     // month[2] = \"March\";\n  //     // month[3] = \"April\";\n  //     // month[4] = \"May\";\n  //     // month[5] = \"June\";\n  //     // month[6] = \"July\";\n  //     // month[7] = \"August\";\n  //     // month[8] = \"September\";\n  //     // month[9] = \"October\";\n  //     // month[10] = \"November\";\n  //     // month[11] = \"December\";\n  //     return month[monthIndex];\n  // }\n\n\n  function DayAsString(dayIndex) {\n    var weekdays = new Array(7);\n    weekdays[0] = \"Sunday\";\n    weekdays[1] = \"Monday\";\n    weekdays[2] = \"Tuesday\";\n    weekdays[3] = \"Wednesday\";\n    weekdays[4] = \"Thursday\";\n    weekdays[5] = \"Friday\";\n    weekdays[6] = \"Saturday\";\n    return weekdays[dayIndex];\n  }\n\n  var startDate = new Date();\n  var aryDates = GetDates(startDate, 0);\n  console.log(aryDates);\n  const state = {\n    labels: ['January', 'February', 'March', 'April', 'May'],\n    datasets: [{\n      label: 'Rainfall',\n      backgroundColor: 'rgba(75,192,192,1)',\n      borderColor: 'rgba(0,0,0,1)',\n      borderWidth: 2,\n      data: [65, 59, 80, 81, 56]\n    }]\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"toDoChart__wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 2\n    }\n  }, /*#__PURE__*/React.createElement(Bar, {\n    data: state,\n    options: {\n      title: {\n        display: true,\n        text: 'Average Rainfall per month',\n        fontSize: 20\n      },\n      legend: {\n        display: true,\n        position: 'right'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/kamil/Desktop/Programowanie/ygo/src/components/todo_chart/ToDoChart.js"],"names":["React","useState","useEffect","db","firebase","Bar","ToDoList","user","tasks","setTasks","today","Date","todayDate","String","getDate","padStart","getMonth","undefined","collection","displayName","doc","orderBy","onSnapshot","snapshot","docs","map","data","GetDates","startDate","daysToAdd","aryDates","i","currentDate","setDate","push","DayAsString","getDay","dayIndex","weekdays","Array","console","log","state","labels","datasets","label","backgroundColor","borderColor","borderWidth","title","display","text","fontSize","legend","position"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './ToDoChart.css'\nimport { db } from '../../firebase.js'\nimport firebase from \"firebase\"\nimport {Bar} from 'react-chartjs-2';\n\n\nexport default function ToDoList({user}) {\n    \n    const [tasks, setTasks] = useState([])\n\n    const today = new Date()\n    const todayDate = String(today.getDate()).padStart(2, '0') + \"_\" + String(today.getMonth() + 1).padStart(2, '0'); \n\n     useEffect(() => {  //function to download task from today.\n        if(user!==undefined){   \n             db \n                .collection(user.displayName)\n                .doc(\"ToDoList\")\n                .collection(todayDate) //todayDate\n                .orderBy(\"timestamp\", \"desc\")\n                .onSnapshot((snapshot) =>{\n                    setTasks(snapshot.docs.map((doc) => doc.data()));\n                });\n            }\n       \n    }, [user])\n\n\n    function GetDates(startDate, daysToAdd) {\n      var aryDates = [];\n  \n      for (var i = -7; i <= daysToAdd; i++) {\n          var currentDate = new Date();\n          currentDate.setDate(startDate.getDate() + i);\n          aryDates.push(DayAsString(currentDate.getDay()) + \", \" + currentDate.getDate());\n      }\n  \n      return aryDates;\n  }\n  \n  // function MonthAsString(monthIndex) {\n  //     var d = new Date();\n  //     // var month = new Array();\n  //     // month[0] = \"January\";\n  //     // month[1] = \"February\";\n  //     // month[2] = \"March\";\n  //     // month[3] = \"April\";\n  //     // month[4] = \"May\";\n  //     // month[5] = \"June\";\n  //     // month[6] = \"July\";\n  //     // month[7] = \"August\";\n  //     // month[8] = \"September\";\n  //     // month[9] = \"October\";\n  //     // month[10] = \"November\";\n  //     // month[11] = \"December\";\n  \n  //     return month[monthIndex];\n  // }\n  \n  function DayAsString(dayIndex) {\n      var weekdays = new Array(7);\n      weekdays[0] = \"Sunday\";\n      weekdays[1] = \"Monday\";\n      weekdays[2] = \"Tuesday\";\n      weekdays[3] = \"Wednesday\";\n      weekdays[4] = \"Thursday\";\n      weekdays[5] = \"Friday\";\n      weekdays[6] = \"Saturday\";\n  \n      return weekdays[dayIndex];\n  }\n  \n  var startDate = new Date();\n  var aryDates = GetDates(startDate, 0);\n  console.log(aryDates)\n\n\n\n\n\n\n\n\n\n\n\n    const state = {\n      labels: ['January', 'February', 'March',\n               'April', 'May'],\n      datasets: [\n        {\n          label: 'Rainfall',\n          backgroundColor: 'rgba(75,192,192,1)',\n          borderColor: 'rgba(0,0,0,1)',\n          borderWidth: 2,\n          data: [65, 59, 80, 81, 56]\n        }\n      ]\n    }\n    \n    \n    return (\n    <div className=\"toDoChart__wrapper\">\n <div>\n        <Bar\n          data={state}\n          options={{\n            title:{\n              display:true,\n              text:'Average Rainfall per month',\n              fontSize:20\n            },\n            legend:{\n              display:true,\n              position:'right'\n            }\n          }}\n        />\n      </div>\n    </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}