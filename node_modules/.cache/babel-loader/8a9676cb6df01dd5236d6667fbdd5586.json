{"ast":null,"code":"var _jsxFileName = \"/Users/kamil/Desktop/Programowanie/ygo/src/components/todo_list/ToDoList.js\";\nimport React, { useState, useEffect, useRef, useLayoutEffect } from 'react';\nimport './ToDoList.css';\nimport { db } from '../../firebase.js';\nimport firebase from \"firebase\";\nexport default function ToDoList({\n  user\n}, {\n  tasks\n}, {\n  doneTasks\n}) {\n  // const [newTaskValue, setTask] = useState(\"\");\n  // const [tasks, setTasks] = useState([]);\n  // const [doneTasks, setTaskDone] = useState(0)\n  const today = new Date();\n  const todayDate = String(today.getDate()).padStart(2, '0') + \"_\" + String(today.getMonth() + 1).padStart(2, '0');\n\n  const addTask = e => {\n    //function to add task \n    e.preventDefault();\n    db.collection(user.displayName).doc(\"ToDoList\").collection(todayDate).add({\n      text: newTaskValue,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n      isDone: false\n    });\n    setTask('');\n  };\n\n  const onHoverTest = e => {}; //  useEffect(() => {  //function to download task from today.\n  //     if(user!=undefined){   \n  //         db \n  //             .collection(user.displayName)\n  //             .doc(\"ToDoList\")\n  //             .collection(todayDate) //todayDate\n  //             .orderBy(\"timestamp\", \"desc\")\n  //             .onSnapshot((snapshot) =>{\n  //                 setTasks(snapshot.docs.map(doc => ({\n  //                     id: doc.id,\n  //                     task: doc.data()\n  //                     })));\n  //                     }) \n  //         } \n  // }, [user])\n  // const useIsMount = () => { //function to return, than first render or no\n  //     const isMountRef = useRef(true);\n  //     useEffect(() => {\n  //       isMountRef.current = false;\n  //     }, []);\n  //     return isMountRef.current;\n  //   };\n  //     const isMount = useIsMount();\n  //     useEffect(() => {\n  //       if (!isMount && tasks.length>=1) {\n  //         let howManyTaskIsDone = 0;\n  //         for(let i =0; i<=tasks.length-1; i++){\n  //              if(tasks[i].task.isDone == true){\n  //                 howManyTaskIsDone+=1\n  //                 setTaskDone(howManyTaskIsDone);\n  //                 }\n  //         } \n  //       }\n  //     }, [tasks]);\n\n\n  const setAsDone = e => {\n    db.collection(user.displayName).doc(\"ToDoList\").collection(todayDate).doc(e.target.id).update({\n      isDone: true\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"toDoList__wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"toDoList__list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, tasks.map(task => /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 21\n    }\n  }, \" \", task.task.isDone ? /*#__PURE__*/React.createElement(\"li\", {\n    className: \"toDoList__item\",\n    value: task.task.text,\n    id: task.id,\n    onClick: setAsDone,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 25\n    }\n  }, task.task.text) : /*#__PURE__*/React.createElement(\"li\", {\n    value: task.task.text,\n    id: task.id,\n    onClick: setAsDone,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 25\n    }\n  }, task.task.text)))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"toDoList__addTask\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: newTaskValue,\n    onChange: e => setTask(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onMouseEnter: onHoverTest,\n    onClick: addTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }, \"Add Task\"))));\n}","map":{"version":3,"sources":["/Users/kamil/Desktop/Programowanie/ygo/src/components/todo_list/ToDoList.js"],"names":["React","useState","useEffect","useRef","useLayoutEffect","db","firebase","ToDoList","user","tasks","doneTasks","today","Date","todayDate","String","getDate","padStart","getMonth","addTask","e","preventDefault","collection","displayName","doc","add","text","newTaskValue","timestamp","firestore","FieldValue","serverTimestamp","isDone","setTask","onHoverTest","setAsDone","target","id","update","map","task","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,EAA6CC,eAA7C,QAAmE,OAAnE;AACA,OAAO,gBAAP;AACA,SAASC,EAAT,QAAmB,mBAAnB;AACA,OAAOC,QAAP,MAAqB,UAArB;AAEA,eAAe,SAASC,QAAT,CAAkB;AAACC,EAAAA;AAAD,CAAlB,EAA0B;AAACC,EAAAA;AAAD,CAA1B,EAAmC;AAACC,EAAAA;AAAD,CAAnC,EAAiD;AAC5D;AACA;AACA;AAEA,QAAMC,KAAK,GAAG,IAAIC,IAAJ,EAAd;AACA,QAAMC,SAAS,GAAGC,MAAM,CAACH,KAAK,CAACI,OAAN,EAAD,CAAN,CAAwBC,QAAxB,CAAiC,CAAjC,EAAoC,GAApC,IAA2C,GAA3C,GAAiDF,MAAM,CAACH,KAAK,CAACM,QAAN,KAAmB,CAApB,CAAN,CAA6BD,QAA7B,CAAsC,CAAtC,EAAyC,GAAzC,CAAnE;;AAIA,QAAME,OAAO,GAAIC,CAAD,IAAO;AAAG;AACrBA,IAAAA,CAAC,CAACC,cAAF;AACAf,IAAAA,EAAE,CAACgB,UAAH,CAAcb,IAAI,CAACc,WAAnB,EAAgCC,GAAhC,CAAoC,UAApC,EAAgDF,UAAhD,CAA2DR,SAA3D,EAAsEW,GAAtE,CAA0E;AACtEC,MAAAA,IAAI,EAAEC,YADgE;AAEtEC,MAAAA,SAAS,EAAErB,QAAQ,CAACsB,SAAT,CAAmBC,UAAnB,CAA8BC,eAA9B,EAF2D;AAGtEC,MAAAA,MAAM,EAAE;AAH8D,KAA1E;AAKAC,IAAAA,OAAO,CAAC,EAAD,CAAP;AACH,GARF;;AAUC,QAAMC,WAAW,GAAId,CAAD,IAAM,CAEzB,CAFD,CApB2D,CA2B5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAOA,QAAMe,SAAS,GAAIf,CAAD,IAAO;AACrBd,IAAAA,EAAE,CAACgB,UAAH,CAAcb,IAAI,CAACc,WAAnB,EAAgCC,GAAhC,CAAoC,UAApC,EAAgDF,UAAhD,CAA2DR,SAA3D,EAAsEU,GAAtE,CAA0EJ,CAAC,CAACgB,MAAF,CAASC,EAAnF,EACCC,MADD,CACQ;AAACN,MAAAA,MAAM,EAAE;AAAT,KADR;AAEH,GAHD;;AAOA,sBACA;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCtB,KAAK,CAAC6B,GAAN,CAAWC,IAAD,iBACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAMA,IAAI,CAACA,IAAL,CAAUR,MAAV,gBACF;AAAI,IAAA,SAAS,EAAC,gBAAd;AAA+B,IAAA,KAAK,EAAEQ,IAAI,CAACA,IAAL,CAAUd,IAAhD;AAAsD,IAAA,EAAE,EAAEc,IAAI,CAACH,EAA/D;AAAmE,IAAA,OAAO,EAAEF,SAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwFK,IAAI,CAACA,IAAL,CAAUd,IAAlG,CADE,gBAEF;AAAI,IAAA,KAAK,EAAEc,IAAI,CAACA,IAAL,CAAUd,IAArB;AAA2B,IAAA,EAAE,EAAEc,IAAI,CAACH,EAApC;AAAwC,IAAA,OAAO,EAAEF,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA6DK,IAAI,CAACA,IAAL,CAAUd,IAAvE,CAFJ,CADP,CADD,CADR,eAaI;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,KAAK,EAAEC,YAA1B;AAAwC,IAAA,QAAQ,EAAEP,CAAC,IAAIa,OAAO,CAACb,CAAC,CAACgB,MAAF,CAASK,KAAV,CAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI;AAAQ,IAAA,YAAY,EAAEP,WAAtB;AAAmC,IAAA,OAAO,EAAEf,OAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,CAbJ,CADA,CADA;AAwBH","sourcesContent":["import React, { useState, useEffect, useRef, useLayoutEffect} from 'react'\nimport './ToDoList.css'\nimport { db } from '../../firebase.js'\nimport firebase from \"firebase\"\n\nexport default function ToDoList({user}, {tasks}, {doneTasks} ) {\n    // const [newTaskValue, setTask] = useState(\"\");\n    // const [tasks, setTasks] = useState([]);\n    // const [doneTasks, setTaskDone] = useState(0)\n    \n    const today = new Date()\n    const todayDate = String(today.getDate()).padStart(2, '0') + \"_\" + String(today.getMonth() + 1).padStart(2, '0');\n\n\n\n    const addTask = (e) => {  //function to add task \n         e.preventDefault();\n         db.collection(user.displayName).doc(\"ToDoList\").collection(todayDate).add({\n             text: newTaskValue,\n             timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n             isDone: false\n         })\n         setTask('');\n     }\n\n     const onHoverTest = (e) =>{ \n\n     }\n\n     \n\n    \n    //  useEffect(() => {  //function to download task from today.\n    //     if(user!=undefined){   \n    //         db \n    //             .collection(user.displayName)\n    //             .doc(\"ToDoList\")\n    //             .collection(todayDate) //todayDate\n    //             .orderBy(\"timestamp\", \"desc\")\n    //             .onSnapshot((snapshot) =>{\n    //                 setTasks(snapshot.docs.map(doc => ({\n    //                     id: doc.id,\n    //                     task: doc.data()\n    //                     })));\n    //                     }) \n    //         } \n       \n    // }, [user])\n\n\n    // const useIsMount = () => { //function to return, than first render or no\n    //     const isMountRef = useRef(true);\n    //     useEffect(() => {\n    //       isMountRef.current = false;\n    //     }, []);\n    //     return isMountRef.current;\n    //   };\n\n    \n    //     const isMount = useIsMount();\n      \n    //     useEffect(() => {\n    //       if (!isMount && tasks.length>=1) {\n    //         let howManyTaskIsDone = 0;\n    //         for(let i =0; i<=tasks.length-1; i++){\n    //              if(tasks[i].task.isDone == true){\n    //                 howManyTaskIsDone+=1\n    //                 setTaskDone(howManyTaskIsDone);\n    //                 }\n    //         } \n    //       }\n    //     }, [tasks]);\n      \n\n\n          \n        \n\n    const setAsDone = (e) => {\n        db.collection(user.displayName).doc(\"ToDoList\").collection(todayDate).doc(e.target.id)\n        .update({isDone: true})\n    }\n    \n\n    \n    return (\n    <div className=\"toDoList__wrapper\">\n    <div className=\"toDoList__list\">\n            <ul>\n            {tasks.map((task) => (\n                    <p> { task.task.isDone ?\n                        <li className=\"toDoList__item\" value={task.task.text} id={task.id} onClick={setAsDone}>{task.task.text}</li>:\n                        <li value={task.task.text} id={task.id} onClick={setAsDone}>{task.task.text}</li> \n                        }\n                    </p>\n                )\n                \n                )}\n            </ul>\n        \n        <div className=\"toDoList__addTask\">\n            <input type=\"text\" value={newTaskValue} onChange={e => setTask(e.target.value)}></input>\n            <button onMouseEnter={onHoverTest} onClick={addTask}>Add Task</button>\n    </div>\n    </div>\n    </div>\n    )\n\n\n} \n"]},"metadata":{},"sourceType":"module"}